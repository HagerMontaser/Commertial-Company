//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EF_Project
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EFProjectEntities : DbContext
    {
        public EFProjectEntities()
            : base("name=EFProjectEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Exchange> Exchanges { get; set; }
        public virtual DbSet<Exchange_Quantity> Exchange_Quantity { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Item_Info> Item_Info { get; set; }
        public virtual DbSet<Release> Releases { get; set; }
        public virtual DbSet<Release_Info> Release_Info { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
    
        public virtual int Exchange_Insert(Nullable<int> eID, Nullable<int> iID, Nullable<int> wID, Nullable<int> cID, Nullable<System.DateTime> eDATE)
        {
            var eIDParameter = eID.HasValue ?
                new ObjectParameter("EID", eID) :
                new ObjectParameter("EID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(int));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var eDATEParameter = eDATE.HasValue ?
                new ObjectParameter("EDATE", eDATE) :
                new ObjectParameter("EDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Exchange_Insert", eIDParameter, iIDParameter, wIDParameter, cIDParameter, eDATEParameter);
        }
    
        public virtual ObjectResult<Exchange_Select_Result> Exchange_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Exchange_Select_Result>("Exchange_Select");
        }
    
        public virtual int ExchangeQuan_Insert(Nullable<int> eID, Nullable<int> iID, Nullable<int> iQUANTITY)
        {
            var eIDParameter = eID.HasValue ?
                new ObjectParameter("EID", eID) :
                new ObjectParameter("EID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(int));
    
            var iQUANTITYParameter = iQUANTITY.HasValue ?
                new ObjectParameter("IQUANTITY", iQUANTITY) :
                new ObjectParameter("IQUANTITY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExchangeQuan_Insert", eIDParameter, iIDParameter, iQUANTITYParameter);
        }
    
        public virtual ObjectResult<Invoice_Select_Result> Invoice_Select(Nullable<int> rID, Nullable<int> iID)
        {
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_Select_Result>("Invoice_Select", rIDParameter, iIDParameter);
        }
    
        public virtual ObjectResult<ItemsMovement_Result> ItemsMovement(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> wID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemsMovement_Result>("ItemsMovement", fromDateParameter, toDateParameter, wIDParameter);
        }
    
        public virtual ObjectResult<ItemsMovement1_Result> ItemsMovement1(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> wID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemsMovement1_Result>("ItemsMovement1", fromDateParameter, toDateParameter, wIDParameter);
        }
    
        public virtual ObjectResult<ItemsWareHouse_Result> ItemsWareHouse(Nullable<int> wID)
        {
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemsWareHouse_Result>("ItemsWareHouse", wIDParameter);
        }
    
        public virtual ObjectResult<Quantity_Select_Result> Quantity_Select(Nullable<int> eID, Nullable<int> iQUANTITY)
        {
            var eIDParameter = eID.HasValue ?
                new ObjectParameter("EID", eID) :
                new ObjectParameter("EID", typeof(int));
    
            var iQUANTITYParameter = iQUANTITY.HasValue ?
                new ObjectParameter("IQUANTITY", iQUANTITY) :
                new ObjectParameter("IQUANTITY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Quantity_Select_Result>("Quantity_Select", eIDParameter, iQUANTITYParameter);
        }
    
        public virtual int Release_Insert(Nullable<int> rID, Nullable<int> iID, Nullable<int> wID, Nullable<int> sID, Nullable<System.DateTime> rDATE)
        {
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(int));
    
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var rDATEParameter = rDATE.HasValue ?
                new ObjectParameter("RDATE", rDATE) :
                new ObjectParameter("RDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Release_Insert", rIDParameter, iIDParameter, wIDParameter, sIDParameter, rDATEParameter);
        }
    
        public virtual ObjectResult<Release_Select_Result> Release_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Release_Select_Result>("Release_Select");
        }
    
        public virtual int ReleaseInfo_Insert(Nullable<int> rID, Nullable<int> iID, Nullable<int> iQUANTITY, Nullable<System.DateTime> iPD, Nullable<int> iED)
        {
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(int));
    
            var iQUANTITYParameter = iQUANTITY.HasValue ?
                new ObjectParameter("IQUANTITY", iQUANTITY) :
                new ObjectParameter("IQUANTITY", typeof(int));
    
            var iPDParameter = iPD.HasValue ?
                new ObjectParameter("IPD", iPD) :
                new ObjectParameter("IPD", typeof(System.DateTime));
    
            var iEDParameter = iED.HasValue ?
                new ObjectParameter("IED", iED) :
                new ObjectParameter("IED", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReleaseInfo_Insert", rIDParameter, iIDParameter, iQUANTITYParameter, iPDParameter, iEDParameter);
        }
    
        public virtual ObjectResult<ReleaseWareHouses_Result> ReleaseWareHouses()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReleaseWareHouses_Result>("ReleaseWareHouses");
        }
    
        public virtual ObjectResult<SelectWareHouse_Result> SelectWareHouse(Nullable<int> wID)
        {
            var wIDParameter = wID.HasValue ?
                new ObjectParameter("WID", wID) :
                new ObjectParameter("WID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectWareHouse_Result>("SelectWareHouse", wIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SelectItemDur_Result> SelectItemDur(Nullable<int> duration, string type, Nullable<System.DateTime> fromDate)
        {
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemDur_Result>("SelectItemDur", durationParameter, typeParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<SelectItemExpire_Result> SelectItemExpire(Nullable<int> duration, string type)
        {
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemExpire_Result>("SelectItemExpire", durationParameter, typeParameter);
        }
    
        public virtual ObjectResult<SelectItemExpire1_Result> SelectItemExpire1(Nullable<int> duration, string type)
        {
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemExpire1_Result>("SelectItemExpire1", durationParameter, typeParameter);
        }
    }
}
